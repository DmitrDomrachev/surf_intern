// Объяснил концепт Future в языке и зачем он нужен.
// Знает, выполняются ли Future в отдельном потоке и как выполнение Future относится к стандартному ходу выполнения программы.
// Знает, в каких состояниях может находиться Future.
// Может работать с async/await и then синтаксисом, и доказал это на примере в коде.
// Знает, в каких состояниях может находиться Future и показал обработку каждого из них в коде.
// Ожидание, выполнено успешно, выполнено с ошибкой.
// Знает назначения каждого из конструкторов Future, и описал их работу в коде.


//  Future - объект, который представляет еще не завершенное действие\результат асинхронной функции
//  Future выполняется не в отдельном потоке. Когда вызываем future,
//  она становится запланированной и не блокирует основной поток.
//  Незавершено / завершено / завершено с ошибкой

//  Future.value(value):
//    Создает новый Future, который немедленно завершается со значением value.
//  Конструктор Future.error - создает  Future, который немедленно завершается с переданой ошибкой.
//  Конструктор Future.delayed(duration, [function]):
//    Создает Future, которая через duration выполнить function. Если function нет, вернет null.
//  Конструктор Future.microtask - создает новый микрозадачу (microtask).
//    Она выполняется с приоритетом событий ui (сначала микротаски, потом остальное)
//  Future.sync - для выполнения синхронной работы
//  Future.wait - принимает список future, заверщится, когда все завершатся или любая future завершится с ошибкой
//  Future.any - принимает список future, заверщится, когда любая завершится, вернет ее значение
//  Future.forEach - применяет указанную функцию к каждому элементу входящего списка и возвращает Future,
//    который завершится, когда все элементы будут обработаны
// Future.doWhile - пока указанное условие истино, создает новый экземпляр Future,

Future<String> fetchData() {
  return Future.delayed(Duration(seconds: 2), () {
    // throw Exception();
    return 'Данные успешно загружены';
  });
}

void main() {
  print('Старт программы');
  // Создание Future
  var future = fetchData();

  // Uncompleted (незавершенное) состояние Future
  print('Состояние Future: ${future}');

  // Completed with a value (завершено со значением)
  future.then((value) {
    print('Завершен со значением: $value');
  });

  // Completed with an error (завершено с ошибкой)
  future.catchError((error) {
    print('Завершен с ошибкой: $error');
  });

  // Вывод независимо от успешного или с ошибкой завершения Future
  future.whenComplete(() {
    print('Future завершен');
  });

  print('Конец программы');
}
