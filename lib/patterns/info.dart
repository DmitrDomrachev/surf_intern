/*

* Паттерны делятся на 3 категории
* Пораждающие - гибкое создание объектов без внесения лишних зависимостей
* Структурные - построяние связей между объектами
* Поведенческие - коммуникация(перелдача сообщений) между объкетами

  Builder
  Порождающий паттерн проектирования,
  который позволяет создавать сложные объекты пошагово.
  Строитель даёт возможность использовать один и тот же код строительства
  для получения разных представлений объектов.

  Prototype
  Порождающий паттерн проектирования,
  который позволяет задавать копии объектов, не задумываясь о их реализации
  (вводим интерфейс для классов, которые нужно копировать и поручаем копирование этим классам)

  Singletone
  Порождающий паттерн проектирования,
  который гарантирует, что у класса будет только один экземпляр,
  предоставляет глобальный доступ к нему. (скрываем базовый конструктор,
  создаем статичное поле для получения объекта)

  Bridge
  Структурный паттерн проектирования,
  который разделяет класс(классы) на две иерархии - абстракции и реализации,
  позволяет изменять их независимо друг от друга (наследование в агрегацию)

  Composite
  Структурный паттерн проектирования,
  который позволяет сгруппировать множество объектов в древовидную структуру,
  а затем работать с ней так, как будто это единичный объект.

  Decorator
  Структурный паттерн проектирования,
  который позволяет динамически добавлять объектам новую функциональность(слои оберток)

  Flyweight
  Структурный паттерн проектирования,
  который позволяет сократить потребляемую программой память (выносим дублирующуюся часть состояния из объекта)

  Proxy
  Структурный паттерн проектирования,
  который позволяет подставлять вместо реальных объектов
  специальные объекты-заменители.
  Эти объекты перехватывают вызовы к оригинальному объекту,
  позволяя сделать что-то до или после передачи вызова оригиналу

  Command
  Поведенческий паттерн проектирования,
  который превращает запросы в объекты,
  позволяя передавать их как аргументы при вызове методов,
  ставить запросы в очередь, логировать их, а также поддерживать отмену операций

  Mediator
  Поведенческий паттерн проектирования,
  который позволяет уменьшить связанность множества классов между собой,
  благодаря перемещению этих связей в один класс-посредник.
*/